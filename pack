#!/usr/bin/rc

if(test `{file -v | sed -E 's/file-//;s/\.([0-9])$/0\1/;s/\.//;q'} -lt 518){
	file=file
} else {
	file=(file -E)
}

ifs=()
nl='
'

fn err {
	echo $* >[1=2]
}

fn strip {
	echo -n $1 | sed -E 's/(\.(tar|xz|gz|bz2|zip))$//'
}

fn type {
	$file -b --mime-type -- $1
}

fn help {
	exec >[1=2]
	switch($1){
	case *unpack
		echo Usage: $1 '[FILE...]'
		echo unpack compressed files and archives
	case *
		echo $1 is not implemented
	}
}

fn pack {
	help $0
}

fn unpack {
	source=$1
	type=`` (/ $nl) {type $source}
	switch($type(2)){
	case gzip;	fop=(gzip -d)
	case x-xz;	fop=(xz -d)
	case x-lzma;	fop=(lzma -d)
	case x-bzip2;	fop=(bzip2 -d)
	case x-tar;	dop=(tar -x -f $source -C)
	case zip;	dop=(unzip -q $source -d)
	case ''	# error
		exit 1
	case *
		return 0
	}

	dest=`{basename -z `{strip $source}}
	if(test -e $dest){
		err ‘$dest’ already exists, not overwriting
		exit 2
	}

	if(! ~ $dop ()){
		temp=`` ($nl) {mktemp -d -p .} 
		$dop $temp || exit 1
		files=($temp/*)
		if(~ $#files 1){
			mv -- $files(1) $dest
			rm -rf -- $temp
		} else {
			mv -- $temp $dest
		}
	}
	dop=()

	if(! ~ $fop ()){
		$fop < $source > $dest || exit 1
	}
	fop=()

	test -w $source && rm -- $source
	unpack $dest
}

while(~ $1 -*){
	switch($1){
	case -h --help -help
		help $0
		exit 1
	case --
		shift
		break
	case *
		echo Unknown option: $1 >[1=2]
		help $0
		exit 1
	}
}

fn map {
	func=$1; shift
	for(a in $*){ $func $a }
}

originals=$*

switch($0){
case *test; run_tests
case *unpack; map unpack $originals
case *; map pack $originals
}

